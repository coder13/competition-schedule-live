type Mutation {
  importCompetition(competitionId: String!): Competition
  createWebhook(competitionId: String!, webhook: WebhookInput!): Webhook!
  updateWebhook(id: Int!, webhook: WebhookInput!): Webhook!
  deleteWebhook(id: Int!): Void

  testWebhook(id: Int!): WebhookResponse
  testEditingWebhook(
    competitionId: String!
    webhook: WebhookInput!
  ): WebhookResponse
  testWebhooks(competitionId: String!): [WebhookResponse]!

  updateAutoAdvance(
    competitionId: String!
    autoAdvance: Boolean
    autoAdvanceDelay: Int
  ): Competition

  startActivity(competitionId: String!, activityId: Int!): Activity
  stopActivity(competitionId: String!, activityId: Int!): Activity
  resetActivity(competitionId: String!, activityId: Int!): Activity
  startActivities(competitionId: String!, activityIds: [Int!]!): [Activity]
  stopActivities(competitionId: String!, activityIds: [Int!]!): [Activity]
  resetActivities(competitionId: String!, activityIds: [Int!]): [Activity]
}

input WebhookInput {
  url: String!
  method: HTTPMethod!
  headers: [HeaderInput!]
}

input HeaderInput {
  key: String!
  value: String!
}

type WebhookResponse {
  url: String!
  status: Int!
  statusText: String!
  body: String
}
